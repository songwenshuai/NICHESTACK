/*
 * FILENAME: ftpwin32.c
 *
 * Copyright 1996- 2000 By InterNiche Technologies Inc. All rights reserved
 *
 *
 * MODULE: FTP
 *
 * ROUTINES: drive (), ftp_is_root(), ftp_is_dir(), fs_dodir(), 
 * ROUTINES: lslash(), fs_dir(), fs_permit(), 
 *
 * PORTABLE: no
 */

/* ftpwin32.c The WIN32-dependant portions of the FTP Server code. 
 * 3/1/2000 - Created from ftpsdos.c -JB- 
 */

#include "ftpport.h"    /* TCP/IP, sockets, system info */
#include "ftpsrv.h"

#include <stdio.h>
#include <io.h>
#include <errno.h>
#include <time.h>

int ftpputs(ftpsvr * ftp, char * text);
void ftp_leave_passive_state(ftpsvr * ftp);

/* maps DOS file attribute bits to sort of Unix equivalents */

struct dos_to_unix_mask
{
   char *   unix_mask;  /* roughly equivalent Unix ls file mask */
   u_char   dos_attrib; /* DOS attrib bits */
};

struct dos_to_unix_mask dos_to_unix_tab[] =
{
   { "-rw-rw-rw-",  0 },         /* read/write file */
   { "-r--r--r--", _A_RDONLY },  /* read only file */
   { "drwxrwxrwx", _A_SUBDIR },  /* directory */
   { "dr-xr-xr-x", _A_SUBDIR | _A_RDONLY,  }  /* RO directory */
};

#define SIZE_OF_DOS_TO_UNIX_TAB \
   (sizeof(dos_to_unix_tab)/sizeof(struct dos_to_unix_mask))

/* if you need this array explained to you perhaps you should consider
   a career in fast food service */
char *   month_tab[12]  = 
{
   "Jan",
   "Feb",
   "Mar",
   "Apr",
   "May",
   "Jun",
   "Jul",
   "Aug",
   "Sep",
   "Oct",
   "Nov",
   "Dec"
};

/* FUNCTION: ftp_add_splats()
 * 
 * this function appends a "\*.*" to the end of the filename field of 
 * the ftpsvr structure addressed by the parameter. 
 *
 * PARAM1: ftpsvr *ftp
 *
 * RETURNS: returns 0 when success, !0 otherwise
 */

int ftp_add_splats(ftpsvr * ftp)
{
   char *   cp;

   /* first make sure there's room */
   if ((strlen(ftp->filename) + strlen("\\*.*") + 1) >
      sizeof(ftp->filename))
   {
      ftpputs(ftp, "501 file name too long\r\n");
      return 1;
   }

   /* point to the last char of file spec */
   cp = ftp->filename + strlen(ftp->filename) - 1;
   /* if there's already a \ on the end, don't put on another */
   if (*cp != '\\')
      *++cp = '\\';
   *++cp = '*';
   *++cp = '.';
   *++cp = '*';
   *++cp = 0;
   return 0;
}



/* FUNCTION: ftp_is_root()
 * 
 * PARAM1: ftpsvr *ftp
 *
 * RETURNS: TRUE if the filename field of the ftpsvr is the root of a
 * DOS drive (e.g. looks like "\" or "c:\") 
 */

int ftp_is_root(ftpsvr * ftp)
{
   if (((strlen(ftp->filename) == 1) && (ftp->filename[0] == '\\')) ||
       ((strlen(ftp->filename) == 3) && (ftp->filename[1] == ':') &&
       (ftp->filename[2] == '\\')))
   {
      return TRUE;
   }
   return FALSE;
}


/* FUNCTION: ftp_is_dir()
 * 
 * PARAM1: ftpsvr *ftp
 *
 * RETURNS: TRUE if the filename field of the ftpsvr is a subdirectory,
 *          FALSE if it is not.
 */

int
ftp_is_dir(ftpsvr * ftp)
{
   int      err;
   char *   cp;
   char     c;
   struct _finddata_t   find;

   /* we want to be able to say TRUE to file names like "\dev\" with 
    * a trailing slash, so cast a pointer to the last character of 
    * the the file name and if its a backslash, save it and remove it 
    */
   cp = ftp->filename + strlen(ftp->filename) - 1;
   c = *cp;          /* save end character */
   if (c == '\\')    /* replace it if slash */
      *cp = 0;

   /* call the DOS function on it to see if its a directory */
   err = _findfirst(ftp->filename, &find);

   /* put the character that we might have stepped on back */
   *cp = c;
   if(err == -1)     /* file doesn't exist */
      return FALSE;  /* not a directory */

   /* this will be true if the filename is a directory */
   return (find.attrib & _A_SUBDIR);
}



/* FUNCTION: fs_dodir()
 * 
 * fs_dodir() - do a "dir" (or "ls" for UNIX weenies) on the current 
 * ftp directory, write the resulting text out ftps->datasock, which 
 * is open before this is called. How you do the DIR and buffer is 
 * local to this function. Any tmp files or buffers should be cleaned 
 * up before you return. 
 *
 * PARAM1: ftpsvr * ftp
 * PARAM2: u_long ftpcmd
 *
 * RETURNS: Returns 0 if OK or we handled any errors, 
 * else -1 if caller needs to report error. 
 */

int
fs_dodir(ftpsvr * ftp, u_long ftpcmd)
{
   long     handle;
   long     err;
   char *   p_unix_mask;
   int      bytes_to_send;
   int      bytes_sent;
   int      rc;
   int      blocked;
   int      cur_month;
   time_t   now;  /* current date and time */
   struct tm   now_tm;
   struct dos_to_unix_mask *  p_mask;
   struct _finddata_t   find;

   /* get the current time into now_tm */
   time(&now);
   now_tm = *localtime(&now);

   /* months since beginning of Christian Era */
   cur_month = ((now_tm.tm_year + 1900) * 12) + now_tm.tm_mon;

   /* if there is a splat in the file spec, assume the client knows 
    * exactly what he wants and pass the file spec through unaltered
    */
   if (!strchr(ftp->filename,'*'))
   {
      /* if the filename is the root of a DOS drive or is a subdirectory */
      if (ftp_is_root(ftp) || ftp_is_dir(ftp))
      {
         /* add the "\*.*" to the end of it so that we get a listing of
            its contents and not a listing of the directory entry itself */
         if (ftp_add_splats(ftp))
            return 0;
      }
   }

   sprintf(ftp->filebuf,"150 Transfering listing of %s\r\n",ftp->filename);
   ftpputs(ftp,ftp->filebuf);

   /* if we are already connected to the client because we are in
      passive mode, don't create connection back to client */
   if (!(ftp->passive_state & FTPS_PASSIVE_CONNECTED))
   {
      /* create a data connection back to the client */
      ftp->datasock = FTP_TCPOPEN(ftp);
      if (ftp->datasock == SYS_SOCKETNULL)
      {
         ftpputs(ftp, "425 Can't open data connection\r\n");
         return 0;   /* not actually OK, but we handled error */
      }
   }

   /* find first directory entry matching specification */
   handle = _findfirst(ftp->filename, &find);
   if (handle == -1)
   {
      err = errno;
      sprintf(ftp->filebuf,"426 Windows findfirst error %d\r\n", err);
      ftpputs(ftp, ftp->filebuf);
      /* close the data connection and leave passive state if we in it */
      ftp_leave_passive_state(ftp);
      return 0;   /* not actually OK, but we handled error */
   }
   else
      err = 0;    /* initialize to no error for while loop */

   /* while there's directory entries to process */
   while (err == 0)
   {
      /* just in case we don't find a match in the loop below, use
         the first one */
      p_unix_mask = dos_to_unix_tab[0].unix_mask;
      /* search the table for an attribute matching that of the retrieved
         directory entry */
      for (p_mask = dos_to_unix_tab;
          p_mask < (dos_to_unix_tab + SIZE_OF_DOS_TO_UNIX_TAB);
          ++p_mask)
      {
         /* the only DOS attributes we care about are
            the readonly and subdir bits */
         if ((find.attrib & (_A_RDONLY | _A_SUBDIR)) == p_mask->dos_attrib)
         {
            /* if we find a match, use the corresponding unix mask */
            p_unix_mask = p_mask->unix_mask;
            break;
         }
      }

      /* if client asked for long version of file listing */
      if (ftpcmd == 0x4c495354)  /* "LIST" */
      {
         char *   cp;
         char *   lfptr;
         /* make the response look like what you'd get from a Unix box
          * so that Netscape will make sense of it, something like
          * print month, day, and year, as in:
          *  -rw-r--r--   1 jharan   jharan  11772 Jan 19 1998 nstall.log 
          */
         cp = ctime(&(find.time_write));  /* format time/date */
         lfptr = strchr(cp, '\n');        /* ctime() sometimes appends /r/n... */
         if (lfptr)                       /* got added LF? */
            *lfptr = 0;                   /* write null to clean this up */

         sprintf(ftp->filebuf,
          "%s 0 root root %s %s\r\n",
          p_unix_mask, cp, find.name);
      } 
      else
      {
         /* client asked for short version so just return file name */
         sprintf(ftp->filebuf,"%s\r\n", find.name);
      }

      /* get number of bytes to transmit */
      bytes_to_send = strlen(ftp->filebuf);

      blocked = 0;
      /* while there are bytes left to transmit */
      for (bytes_sent = 0; bytes_to_send > 0; )
      {
         /* try to send as much as is left to transmit */
         rc = t_send(ftp->datasock,
          ftp->filebuf + bytes_sent,bytes_to_send,0);

         /* this means some sort of error occurred */
         if (rc < 0)
         {
            /* get socket error. If it's s (hopefully) transient buffer shortage
             * then just wait a bit and try again, up to a limit:
             */
            rc = t_errno(ftp->datasock);
            if((rc == EWOULDBLOCK) || (rc == ENOBUFS))
            {
               if(blocked++ < 100)     /* don't loop here forever... */
               {
                  tk_yield();    /* let system spin a bit */
                  continue;
               }
            }
            ftpputs(ftp, "426 aborted, data send error\r\n");
            break;
         }

         /* socket could be non-blocking, which means t_send() might have
            sent something less than what was requested */
         bytes_to_send -= rc;
         bytes_sent += rc;

         /* if the whole thing wasn't sent, it wont get any better
            if you don't yield to receive side */
         if (bytes_to_send > 0)
            tk_yield();
      }

      /* if this happens, we broke in the loop above because of a
         socket error */
      if (bytes_to_send > 0)
         break;

      err = _findnext(handle, &find);
   }

   /* if err is now non-zero, then we exited the above loop by calling
    * findnext() on the last file. Report that the transfer went ok
    */
   if (err)
      ftpputs(ftp, "226 Transfer OK, Closing connection\r\n");

   /* close the data connection and leave passive state if we in it */
   ftp_leave_passive_state(ftp);

   return 0;
}



/* FUNCTION: lslash()
 * 
 * lslash() - format universal (UNIX) slashes '/' into local type 
 * '\'. PC-DOS version. 
 *
 * PARAM1: char * path
 *
 * RETURNS: 
 */

void
lslash(char * path)
{
   char *   cp;

   for (cp = path; *cp; cp++)
      if (*cp == '/')      /* UNIX slash? */
      *cp = '\\';       /* convert to DOS slash */
}



/* FUNCTION: fs_dir()
 * 
 * fs_dir() - verify drive/directory exists. Returns TRUE or FALSE. 
 *
 * PARAM1: ftpsvr * ftp
 *
 * RETURNS: 
 */

int
fs_dir(ftpsvr * ftp)
{
   /* if the ftp->filename is the root of a DOS drive or is a subdirectory */
   if (ftp_is_root(ftp) || ftp_is_dir(ftp))
   {
      return TRUE;
   }
   return FALSE;

#ifdef NEVER
   /* chdir() returns 0 when successful */
return (chdir(ftp->filename) ? FALSE : TRUE);
#endif
}



/* FUNCTION: fs_permit()
 * 
 * fs_permit() - check if the logged in user has permissin for this 
 * file operation. Returns TRUE or FALSE. 
 *
 * PARAM1: ftpsvr * ftp
 *
 * RETURNS: 
 */

int
fs_permit(ftpsvr * ftp) /* verify user permission */
{
   USE_ARG(ftp);

   return TRUE;         /* default to a very liberal policy */
}


